{"version":3,"sources":["components/Header.js","components/Footer.js","components/ToDoList.js","components/Content.js","App.js","reportWebVitals.js","index.js"],"names":["initialValue","id","title","completed","Header","todos","setTodos","useState","form","setForm","useEffect","className","onSubmit","e","preventDefault","trim","placeholder","autoFocus","value","onChange","target","nanoid","Footer","setFilteredList","filteredList","filterTodos","setFilterTodos","filteredItems","filter","item","leftCount","leftCountCompleted","length","onClick","cleared","clearedAll","ToDoList","htmlFor","map","type","filteredArray","changeCompleted","checked","removedTodo","remove","Content","initialValues","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d2d9443.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\n//initialValue for input form\r\nconst initialValue = { id: \"\", title: \"\", completed: false };\r\n\r\nexport default function Header({ todos, setTodos }) {\r\n  //object State for todo list\r\n  const [form, setForm] = useState(initialValue);\r\n\r\n  //when todos state is changed the form is assigned with initialValue\r\n  useEffect(() => {\r\n    setForm(initialValue);\r\n  }, [todos]);\r\n\r\n  //Captures changes and assigns to form state\r\n  const onChangeInput = (e) => {\r\n    setForm({ ...form, title: e.target.value, id: nanoid() });\r\n  };\r\n\r\n  //when a value is submitted, first it checks some condition then set the value to the todos array.\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (form.title.trim() === \"\") {\r\n      return false;\r\n    }\r\n    setTodos([...todos, form]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* input form, which takes data from user */}\r\n      <header className=\"header\">\r\n        <h1>todos</h1>\r\n        <form onSubmit={onSubmit}>\r\n          <input\r\n            className=\"new-todo\"\r\n            placeholder=\"What needs to be done?\"\r\n            autoFocus\r\n            value={form.title}\r\n            onChange={onChangeInput}\r\n          />\r\n        </form>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\n\r\nfunction Footer({ todos, setTodos, setFilteredList, filteredList }) {\r\n  const [filterTodos, setFilterTodos] = useState(\"all\");\r\n\r\n  //filters items\r\n  useEffect(() => {\r\n    if (filterTodos === \"all\") {\r\n      setFilteredList(todos);\r\n    } else if (filterTodos === \"active\") {\r\n      const filteredItems = todos.filter((item) => {\r\n        return item.completed === false;\r\n      });\r\n      setFilteredList(filteredItems);\r\n    } else if (filterTodos === \"completed\") {\r\n      const filteredItems = todos.filter((item) => {\r\n        return item.completed === true;\r\n      });\r\n      setFilteredList(filteredItems);\r\n    }\r\n  }, [filterTodos, todos]);\r\n\r\n  //Gets the count of uncompleted tasks\r\n  const leftCount = todos.filter((item) => {\r\n    return item.completed === false;\r\n  });\r\n  \r\n  //Gets the count of completed tasks\r\n  const leftCountCompleted = todos.filter((item) => {\r\n    return item.completed === true;\r\n  });\r\n\r\n  //Clears All Completed Tasks\r\n  const clearCompleted = () => {\r\n    const cleared = filteredList.filter((item) => {\r\n      return item.completed === false;\r\n    });\r\n    setTodos(cleared);\r\n\r\n    const clearedAll = todos.filter((item) => {\r\n      return item.completed === false;\r\n    });\r\n    setTodos(clearedAll);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <footer className=\"footer\">\r\n        {/* shows how many items left. */}\r\n        <span className=\"todo-count\">\r\n          <strong>{leftCount.length}</strong>\r\n          items left\r\n        </span>\r\n\r\n        <ul className=\"filters\">\r\n          <li>\r\n            <a\r\n              className={filterTodos === \"all\" ? \"selected\" : \"\"}\r\n              onClick={() => setFilterTodos(\"all\")}\r\n            >\r\n              All\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a\r\n              className={filterTodos === \"active\" ? \"selected\" : \"\"}\r\n              onClick={() => setFilterTodos(\"active\")}\r\n            >\r\n              Active\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a\r\n              className={filterTodos === \"completed\" ? \"selected\" : \"\"}\r\n              onClick={() => setFilterTodos(\"completed\")}\r\n            >\r\n              Completed\r\n            </a>\r\n          </li>\r\n        </ul>\r\n\r\n        {/* <!-- Hidden if no completed items are left â†“ --> */}\r\n        <button className=\"clear-completed\" onClick={clearCompleted}>\r\n          {leftCountCompleted.length > 0 && 'Clear completed'}\r\n        </button>\r\n      </footer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","function ToDoList({ filteredList, setTodos }) {\r\n  //removes item from todo list.\r\n  const remove = (id) => {\r\n    const removedTodo = filteredList.filter((item) => item.id !== id);\r\n    setTodos(removedTodo);\r\n  };\r\n\r\n  //Changes the item.complete porperty to false or true, it depends what it was, then sets it back to the todo array\r\n  const changeCompleted = (id) => {\r\n    const filteredArray = filteredList.map((item) => {\r\n      if (item.id === id) {\r\n        item.completed = !item.completed;\r\n        return item;\r\n      } else {\r\n        return item;\r\n      }\r\n    });\r\n\r\n    setTodos(filteredArray);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <label htmlFor=\"toggle-all\"></label>\r\n        {/* prints all todo items as list and helps to manipulate on it */}\r\n      <ul className=\"todo-list\">\r\n        {filteredList.map((item) => (\r\n          <li key={item.id} className={item.completed ? \"completed\" : \"\"}>\r\n            <div className=\"view\">\r\n              <input\r\n                className=\"toggle\"\r\n                type=\"checkbox\"\r\n                onChange={() => changeCompleted(item.id)}\r\n                checked={item.completed ? 'checked' : ''}\r\n              />\r\n              <label>{item.title}</label>\r\n              <button\r\n                className=\"destroy\"\r\n                onClick={() => remove(item.id)}\r\n              ></button>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoList;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Footer from \"./Footer\";\r\nimport ToDoList from \"./ToDoList\";\r\n\r\nexport default function Content({todos, setTodos}) {\r\n\r\n    //List, which is filtered for ToDoList Component\r\n    const [filteredList, setFilteredList] = useState([]);\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <section className=\"main\">\r\n        <input className=\"toggle-all\" type=\"checkbox\" />\r\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\r\n        {/* Component for listing Todos */}\r\n        <ToDoList filteredList={filteredList} setTodos={setTodos}/>\r\n      </section>\r\n\r\n      {/* Component for filtering */}\r\n      <Footer  todos={todos} setTodos={setTodos} setFilteredList={setFilteredList} filteredList={filteredList} />\r\n    </>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport Header from \"./components/Header\";\nimport Content from \"./components/Content\";\nimport { useState } from \"react\";\n\nconst initialValues = [];\n\nfunction App() {\n  //Array State for todos List\n  const [todos, setTodos] = useState(initialValues);\n\n  return (\n    <>\n      <section className=\"todoapp\">\n        {/* Header Component */}\n        <Header todos={todos} setTodos={setTodos}/>\n\n        {/* Content Component */}\n        <Content todos={todos} setTodos={setTodos}/>\n      </section>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}